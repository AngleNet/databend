# Correlated subquery with joins
select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number)
----
Project: [number]
    EvalScalar: [number]
        Filter: [number = subquery_4]
            CrossApply
                CrossJoin
                    Scan: default.system.numbers
                    Scan: default.system.numbers
                Max1Row
                    Project: [COUNT(*)]
                        EvalScalar: [COUNT(*)]
                            Aggregate: group items: [], aggregate functions: [COUNT(*)]
                                Filter: [number = number]
                                    CrossJoin
                                        Scan: default.system.numbers
                                        Scan: default.system.numbers


# Uncorrelated subquery
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = 0)
----
Project: [number]
    EvalScalar: [number]
        CrossJoin
            Scan: default.system.numbers
            Project: [subquery]
                Filter: [subquery_3]
                    EvalScalar: [count(*) > 0]
                        Aggregate: group items: [], aggregate functions: [count(*)]
                            EvalScalar: [number]
                                Filter: [number = 0]
                                    Scan: default.system.numbers


# Uncorrelated subquery
select t.number from numbers(1) as t where number = (select * from numbers(1) where number = 0)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: INNER, build keys: [subquery_1], probe keys: [number], join filters: []
            Scan: default.system.numbers
            Max1Row
                EvalScalar: [number]
                    Filter: [number = 0]
                        Scan: default.system.numbers


# Correlated subquery can be translated to SemiJoin
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: SEMI, build keys: [number], probe keys: [number], join filters: []
            Scan: default.system.numbers
            EvalScalar: [number]
                Scan: default.system.numbers


# Correlated subquery can be translated to AntiJoin
select t.number from numbers(1) as t where not exists (select * from numbers(1) where number = t.number)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: ANTI, build keys: [number], probe keys: [number], join filters: []
            Scan: default.system.numbers
            EvalScalar: [number]
                Scan: default.system.numbers


select * from numbers(1) as t where exists (select number as a from numbers(1) where number = t.number)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: SEMI, build keys: [number], probe keys: [number], join filters: []
            Scan: default.system.numbers
            EvalScalar: [number]
                Scan: default.system.numbers


# Exists with different kinds of predicate
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and number = 0 and t.number < 10)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: SEMI, build keys: [number], probe keys: [number], join filters: []
            Filter: [number < 10]
                Scan: default.system.numbers
            EvalScalar: [number]
                Filter: [number = 0]
                    Scan: default.system.numbers


# Exists with non-equi predicate
select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and t.number < number)
----
Project: [number]
<<<<<<< HEAD
    HashJoin: SEMI, build keys: [number], probe keys: [number], join filters: [number < number]
        Scan: default.system.numbers
        Scan: default.system.numbers
=======
    EvalScalar: [number]
        Filter: [subquery_3]
            CrossApply
                Scan: default.system.numbers
                Project: [subquery]
                    EvalScalar: [count(*) > 0]
                        Aggregate: group items: [], aggregate functions: [count(*)]
                            EvalScalar: [number]
                                Filter: [number = number, number < number]
                                    Scan: default.system.numbers
>>>>>>> 06a5cb7f1 (save)


# Exists project required columns
select t.number from numbers(1) as t where exists (select number as a, number as b, number as c from numbers(1) where number = t.number)
----
Project: [number]
    EvalScalar: [number]
        HashJoin: SEMI, build keys: [number], probe keys: [number], join filters: []
            Scan: default.system.numbers
            EvalScalar: [number]
                Scan: default.system.numbers


# Push down filter through CrossApply
select t.number from numbers(1) as t, numbers(1) as t1 where (select count(*) = 1 from numbers(1) where t.number = number) and t.number = t1.number
----
Project: [number]
    EvalScalar: [number]
        Filter: [subquery_3]
            CrossApply
                HashJoin: INNER, build keys: [number], probe keys: [number], join filters: []
                    Scan: default.system.numbers
                    Scan: default.system.numbers
                Max1Row
                    Project: [COUNT(*) = 1]
                        EvalScalar: [COUNT(*) = 1]
                            Aggregate: group items: [], aggregate functions: [COUNT(*)]
                                Filter: [number = number]
                                    Scan: default.system.numbers


# Semi join with other conditions
select t.number from numbers(1) as t where exists(select * from numbers(1) as t1 where t.number > t1.number) and not exists(select * from numbers(1) as t1 where t.number < t1.number)
----
Project: [number]
    HashJoin: ANTI, build keys: [], probe keys: [], join filters: [number < number]
        HashJoin: SEMI, build keys: [], probe keys: [], join filters: [number > number]
            Scan: default.system.numbers
            Scan: default.system.numbers
        Scan: default.system.numbers


